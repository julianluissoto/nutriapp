
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Nutritionist
 * 
 */
export type Nutritionist = $Result.DefaultSelection<Prisma.$NutritionistPayload>
/**
 * Model PatientUser
 * 
 */
export type PatientUser = $Result.DefaultSelection<Prisma.$PatientUserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Patients
 * const patients = await prisma.patient.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Patients
   * const patients = await prisma.patient.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.nutritionist`: Exposes CRUD operations for the **Nutritionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nutritionists
    * const nutritionists = await prisma.nutritionist.findMany()
    * ```
    */
  get nutritionist(): Prisma.NutritionistDelegate<ExtArgs>;

  /**
   * `prisma.patientUser`: Exposes CRUD operations for the **PatientUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientUsers
    * const patientUsers = await prisma.patientUser.findMany()
    * ```
    */
  get patientUser(): Prisma.PatientUserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Patient: 'Patient',
    Nutritionist: 'Nutritionist',
    PatientUser: 'PatientUser'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'patient' | 'nutritionist' | 'patientUser'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Nutritionist: {
        payload: Prisma.$NutritionistPayload<ExtArgs>
        fields: Prisma.NutritionistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NutritionistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NutritionistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          findFirst: {
            args: Prisma.NutritionistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NutritionistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          findMany: {
            args: Prisma.NutritionistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>[]
          }
          create: {
            args: Prisma.NutritionistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          createMany: {
            args: Prisma.NutritionistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NutritionistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          update: {
            args: Prisma.NutritionistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          deleteMany: {
            args: Prisma.NutritionistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NutritionistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NutritionistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NutritionistPayload>
          }
          aggregate: {
            args: Prisma.NutritionistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNutritionist>
          }
          groupBy: {
            args: Prisma.NutritionistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NutritionistGroupByOutputType>[]
          }
          count: {
            args: Prisma.NutritionistCountArgs<ExtArgs>,
            result: $Utils.Optional<NutritionistCountAggregateOutputType> | number
          }
        }
      }
      PatientUser: {
        payload: Prisma.$PatientUserPayload<ExtArgs>
        fields: Prisma.PatientUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          findFirst: {
            args: Prisma.PatientUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          findMany: {
            args: Prisma.PatientUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>[]
          }
          create: {
            args: Prisma.PatientUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          createMany: {
            args: Prisma.PatientUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          update: {
            args: Prisma.PatientUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          deleteMany: {
            args: Prisma.PatientUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientUserPayload>
          }
          aggregate: {
            args: Prisma.PatientUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatientUser>
          }
          groupBy: {
            args: Prisma.PatientUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientUserCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientUserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NutritionistCountOutputType
   */

  export type NutritionistCountOutputType = {
    patients: number
  }

  export type NutritionistCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patients?: boolean | NutritionistCountOutputTypeCountPatientsArgs
  }

  // Custom InputTypes

  /**
   * NutritionistCountOutputType without action
   */
  export type NutritionistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NutritionistCountOutputType
     */
    select?: NutritionistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NutritionistCountOutputType without action
   */
  export type NutritionistCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }



  /**
   * Count Type PatientUserCountOutputType
   */

  export type PatientUserCountOutputType = {
    patients: number
  }

  export type PatientUserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patients?: boolean | PatientUserCountOutputTypeCountPatientsArgs
  }

  // Custom InputTypes

  /**
   * PatientUserCountOutputType without action
   */
  export type PatientUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUserCountOutputType
     */
    select?: PatientUserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PatientUserCountOutputType without action
   */
  export type PatientUserCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    age: number | null
    dni: number | null
    patientUserId: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    age: number | null
    dni: number | null
    patientUserId: number | null
  }

  export type PatientMinAggregateOutputType = {
    name: string | null
    id: number | null
    lastname: string | null
    email: string | null
    patientId: number | null
    tips: string | null
    age: number | null
    weight: string | null
    height: string | null
    objective: string | null
    first_consult: Date | null
    dni: number | null
    location: string | null
    patientUserId: number | null
  }

  export type PatientMaxAggregateOutputType = {
    name: string | null
    id: number | null
    lastname: string | null
    email: string | null
    patientId: number | null
    tips: string | null
    age: number | null
    weight: string | null
    height: string | null
    objective: string | null
    first_consult: Date | null
    dni: number | null
    location: string | null
    patientUserId: number | null
  }

  export type PatientCountAggregateOutputType = {
    name: number
    id: number
    lastname: number
    email: number
    patientId: number
    tips: number
    recipes: number
    age: number
    weight: number
    height: number
    objective: number
    first_consult: number
    dni: number
    location: number
    foodPlan: number
    patientUserId: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
    patientId?: true
    age?: true
    dni?: true
    patientUserId?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
    patientId?: true
    age?: true
    dni?: true
    patientUserId?: true
  }

  export type PatientMinAggregateInputType = {
    name?: true
    id?: true
    lastname?: true
    email?: true
    patientId?: true
    tips?: true
    age?: true
    weight?: true
    height?: true
    objective?: true
    first_consult?: true
    dni?: true
    location?: true
    patientUserId?: true
  }

  export type PatientMaxAggregateInputType = {
    name?: true
    id?: true
    lastname?: true
    email?: true
    patientId?: true
    tips?: true
    age?: true
    weight?: true
    height?: true
    objective?: true
    first_consult?: true
    dni?: true
    location?: true
    patientUserId?: true
  }

  export type PatientCountAggregateInputType = {
    name?: true
    id?: true
    lastname?: true
    email?: true
    patientId?: true
    tips?: true
    recipes?: true
    age?: true
    weight?: true
    height?: true
    objective?: true
    first_consult?: true
    dni?: true
    location?: true
    foodPlan?: true
    patientUserId?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    name: string
    id: number
    lastname: string
    email: string
    patientId: number
    tips: string | null
    recipes: JsonValue | null
    age: number
    weight: string
    height: string
    objective: string
    first_consult: Date
    dni: number
    location: string
    foodPlan: JsonValue | null
    patientUserId: number | null
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    id?: boolean
    lastname?: boolean
    email?: boolean
    patientId?: boolean
    tips?: boolean
    recipes?: boolean
    age?: boolean
    weight?: boolean
    height?: boolean
    objective?: boolean
    first_consult?: boolean
    dni?: boolean
    location?: boolean
    foodPlan?: boolean
    patientUserId?: boolean
    nutritionist?: boolean | NutritionistDefaultArgs<ExtArgs>
    PatientUser?: boolean | Patient$PatientUserArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    name?: boolean
    id?: boolean
    lastname?: boolean
    email?: boolean
    patientId?: boolean
    tips?: boolean
    recipes?: boolean
    age?: boolean
    weight?: boolean
    height?: boolean
    objective?: boolean
    first_consult?: boolean
    dni?: boolean
    location?: boolean
    foodPlan?: boolean
    patientUserId?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    nutritionist?: boolean | NutritionistDefaultArgs<ExtArgs>
    PatientUser?: boolean | Patient$PatientUserArgs<ExtArgs>
  }


  export type $PatientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      nutritionist: Prisma.$NutritionistPayload<ExtArgs>
      PatientUser: Prisma.$PatientUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      name: string
      id: number
      lastname: string
      email: string
      patientId: number
      tips: string | null
      recipes: Prisma.JsonValue | null
      age: number
      weight: string
      height: string
      objective: string
      first_consult: Date
      dni: number
      location: string
      foodPlan: Prisma.JsonValue | null
      patientUserId: number | null
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }


  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const patientWithNameOnly = await prisma.patient.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCreateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    nutritionist<T extends NutritionistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NutritionistDefaultArgs<ExtArgs>>): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    PatientUser<T extends Patient$PatientUserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$PatientUserArgs<ExtArgs>>): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly name: FieldRef<"Patient", 'String'>
    readonly id: FieldRef<"Patient", 'Int'>
    readonly lastname: FieldRef<"Patient", 'String'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly patientId: FieldRef<"Patient", 'Int'>
    readonly tips: FieldRef<"Patient", 'String'>
    readonly recipes: FieldRef<"Patient", 'Json'>
    readonly age: FieldRef<"Patient", 'Int'>
    readonly weight: FieldRef<"Patient", 'String'>
    readonly height: FieldRef<"Patient", 'String'>
    readonly objective: FieldRef<"Patient", 'String'>
    readonly first_consult: FieldRef<"Patient", 'DateTime'>
    readonly dni: FieldRef<"Patient", 'Int'>
    readonly location: FieldRef<"Patient", 'String'>
    readonly foodPlan: FieldRef<"Patient", 'Json'>
    readonly patientUserId: FieldRef<"Patient", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }


  /**
   * Patient.PatientUser
   */
  export type Patient$PatientUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    where?: PatientUserWhereInput
  }


  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
  }



  /**
   * Model Nutritionist
   */

  export type AggregateNutritionist = {
    _count: NutritionistCountAggregateOutputType | null
    _avg: NutritionistAvgAggregateOutputType | null
    _sum: NutritionistSumAggregateOutputType | null
    _min: NutritionistMinAggregateOutputType | null
    _max: NutritionistMaxAggregateOutputType | null
  }

  export type NutritionistAvgAggregateOutputType = {
    id: number | null
  }

  export type NutritionistSumAggregateOutputType = {
    id: number | null
  }

  export type NutritionistMinAggregateOutputType = {
    id: number | null
    name: string | null
    lastname: string | null
    email: string | null
    password: string | null
    location: string | null
  }

  export type NutritionistMaxAggregateOutputType = {
    id: number | null
    name: string | null
    lastname: string | null
    email: string | null
    password: string | null
    location: string | null
  }

  export type NutritionistCountAggregateOutputType = {
    id: number
    name: number
    lastname: number
    email: number
    password: number
    location: number
    _all: number
  }


  export type NutritionistAvgAggregateInputType = {
    id?: true
  }

  export type NutritionistSumAggregateInputType = {
    id?: true
  }

  export type NutritionistMinAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
    location?: true
  }

  export type NutritionistMaxAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
    location?: true
  }

  export type NutritionistCountAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
    location?: true
    _all?: true
  }

  export type NutritionistAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nutritionist to aggregate.
     */
    where?: NutritionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritionists to fetch.
     */
    orderBy?: NutritionistOrderByWithRelationInput | NutritionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NutritionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nutritionists
    **/
    _count?: true | NutritionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionistMaxAggregateInputType
  }

  export type GetNutritionistAggregateType<T extends NutritionistAggregateArgs> = {
        [P in keyof T & keyof AggregateNutritionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutritionist[P]>
      : GetScalarType<T[P], AggregateNutritionist[P]>
  }




  export type NutritionistGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NutritionistWhereInput
    orderBy?: NutritionistOrderByWithAggregationInput | NutritionistOrderByWithAggregationInput[]
    by: NutritionistScalarFieldEnum[] | NutritionistScalarFieldEnum
    having?: NutritionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionistCountAggregateInputType | true
    _avg?: NutritionistAvgAggregateInputType
    _sum?: NutritionistSumAggregateInputType
    _min?: NutritionistMinAggregateInputType
    _max?: NutritionistMaxAggregateInputType
  }

  export type NutritionistGroupByOutputType = {
    id: number
    name: string
    lastname: string
    email: string
    password: string
    location: string
    _count: NutritionistCountAggregateOutputType | null
    _avg: NutritionistAvgAggregateOutputType | null
    _sum: NutritionistSumAggregateOutputType | null
    _min: NutritionistMinAggregateOutputType | null
    _max: NutritionistMaxAggregateOutputType | null
  }

  type GetNutritionistGroupByPayload<T extends NutritionistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NutritionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NutritionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NutritionistGroupByOutputType[P]>
            : GetScalarType<T[P], NutritionistGroupByOutputType[P]>
        }
      >
    >


  export type NutritionistSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    location?: boolean
    patients?: boolean | Nutritionist$patientsArgs<ExtArgs>
    _count?: boolean | NutritionistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nutritionist"]>

  export type NutritionistSelectScalar = {
    id?: boolean
    name?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    location?: boolean
  }

  export type NutritionistInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patients?: boolean | Nutritionist$patientsArgs<ExtArgs>
    _count?: boolean | NutritionistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NutritionistPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Nutritionist"
    objects: {
      patients: Prisma.$PatientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      lastname: string
      email: string
      password: string
      location: string
    }, ExtArgs["result"]["nutritionist"]>
    composites: {}
  }


  type NutritionistGetPayload<S extends boolean | null | undefined | NutritionistDefaultArgs> = $Result.GetResult<Prisma.$NutritionistPayload, S>

  type NutritionistCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NutritionistFindManyArgs, 'select' | 'include'> & {
      select?: NutritionistCountAggregateInputType | true
    }

  export interface NutritionistDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nutritionist'], meta: { name: 'Nutritionist' } }
    /**
     * Find zero or one Nutritionist that matches the filter.
     * @param {NutritionistFindUniqueArgs} args - Arguments to find a Nutritionist
     * @example
     * // Get one Nutritionist
     * const nutritionist = await prisma.nutritionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NutritionistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistFindUniqueArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Nutritionist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NutritionistFindUniqueOrThrowArgs} args - Arguments to find a Nutritionist
     * @example
     * // Get one Nutritionist
     * const nutritionist = await prisma.nutritionist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NutritionistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Nutritionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistFindFirstArgs} args - Arguments to find a Nutritionist
     * @example
     * // Get one Nutritionist
     * const nutritionist = await prisma.nutritionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NutritionistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistFindFirstArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Nutritionist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistFindFirstOrThrowArgs} args - Arguments to find a Nutritionist
     * @example
     * // Get one Nutritionist
     * const nutritionist = await prisma.nutritionist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NutritionistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Nutritionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nutritionists
     * const nutritionists = await prisma.nutritionist.findMany()
     * 
     * // Get first 10 Nutritionists
     * const nutritionists = await prisma.nutritionist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionistWithIdOnly = await prisma.nutritionist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NutritionistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Nutritionist.
     * @param {NutritionistCreateArgs} args - Arguments to create a Nutritionist.
     * @example
     * // Create one Nutritionist
     * const Nutritionist = await prisma.nutritionist.create({
     *   data: {
     *     // ... data to create a Nutritionist
     *   }
     * })
     * 
    **/
    create<T extends NutritionistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistCreateArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Nutritionists.
     *     @param {NutritionistCreateManyArgs} args - Arguments to create many Nutritionists.
     *     @example
     *     // Create many Nutritionists
     *     const nutritionist = await prisma.nutritionist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NutritionistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nutritionist.
     * @param {NutritionistDeleteArgs} args - Arguments to delete one Nutritionist.
     * @example
     * // Delete one Nutritionist
     * const Nutritionist = await prisma.nutritionist.delete({
     *   where: {
     *     // ... filter to delete one Nutritionist
     *   }
     * })
     * 
    **/
    delete<T extends NutritionistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistDeleteArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Nutritionist.
     * @param {NutritionistUpdateArgs} args - Arguments to update one Nutritionist.
     * @example
     * // Update one Nutritionist
     * const nutritionist = await prisma.nutritionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NutritionistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistUpdateArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Nutritionists.
     * @param {NutritionistDeleteManyArgs} args - Arguments to filter Nutritionists to delete.
     * @example
     * // Delete a few Nutritionists
     * const { count } = await prisma.nutritionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NutritionistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NutritionistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nutritionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nutritionists
     * const nutritionist = await prisma.nutritionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NutritionistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nutritionist.
     * @param {NutritionistUpsertArgs} args - Arguments to update or create a Nutritionist.
     * @example
     * // Update or create a Nutritionist
     * const nutritionist = await prisma.nutritionist.upsert({
     *   create: {
     *     // ... data to create a Nutritionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nutritionist we want to update
     *   }
     * })
    **/
    upsert<T extends NutritionistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NutritionistUpsertArgs<ExtArgs>>
    ): Prisma__NutritionistClient<$Result.GetResult<Prisma.$NutritionistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Nutritionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistCountArgs} args - Arguments to filter Nutritionists to count.
     * @example
     * // Count the number of Nutritionists
     * const count = await prisma.nutritionist.count({
     *   where: {
     *     // ... the filter for the Nutritionists we want to count
     *   }
     * })
    **/
    count<T extends NutritionistCountArgs>(
      args?: Subset<T, NutritionistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nutritionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionistAggregateArgs>(args: Subset<T, NutritionistAggregateArgs>): Prisma.PrismaPromise<GetNutritionistAggregateType<T>>

    /**
     * Group by Nutritionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionistGroupByArgs['orderBy'] }
        : { orderBy?: NutritionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nutritionist model
   */
  readonly fields: NutritionistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nutritionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NutritionistClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    patients<T extends Nutritionist$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Nutritionist$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Nutritionist model
   */ 
  interface NutritionistFieldRefs {
    readonly id: FieldRef<"Nutritionist", 'Int'>
    readonly name: FieldRef<"Nutritionist", 'String'>
    readonly lastname: FieldRef<"Nutritionist", 'String'>
    readonly email: FieldRef<"Nutritionist", 'String'>
    readonly password: FieldRef<"Nutritionist", 'String'>
    readonly location: FieldRef<"Nutritionist", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Nutritionist findUnique
   */
  export type NutritionistFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter, which Nutritionist to fetch.
     */
    where: NutritionistWhereUniqueInput
  }


  /**
   * Nutritionist findUniqueOrThrow
   */
  export type NutritionistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter, which Nutritionist to fetch.
     */
    where: NutritionistWhereUniqueInput
  }


  /**
   * Nutritionist findFirst
   */
  export type NutritionistFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter, which Nutritionist to fetch.
     */
    where?: NutritionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritionists to fetch.
     */
    orderBy?: NutritionistOrderByWithRelationInput | NutritionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nutritionists.
     */
    cursor?: NutritionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nutritionists.
     */
    distinct?: NutritionistScalarFieldEnum | NutritionistScalarFieldEnum[]
  }


  /**
   * Nutritionist findFirstOrThrow
   */
  export type NutritionistFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter, which Nutritionist to fetch.
     */
    where?: NutritionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritionists to fetch.
     */
    orderBy?: NutritionistOrderByWithRelationInput | NutritionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nutritionists.
     */
    cursor?: NutritionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nutritionists.
     */
    distinct?: NutritionistScalarFieldEnum | NutritionistScalarFieldEnum[]
  }


  /**
   * Nutritionist findMany
   */
  export type NutritionistFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter, which Nutritionists to fetch.
     */
    where?: NutritionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritionists to fetch.
     */
    orderBy?: NutritionistOrderByWithRelationInput | NutritionistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nutritionists.
     */
    cursor?: NutritionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritionists.
     */
    skip?: number
    distinct?: NutritionistScalarFieldEnum | NutritionistScalarFieldEnum[]
  }


  /**
   * Nutritionist create
   */
  export type NutritionistCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * The data needed to create a Nutritionist.
     */
    data: XOR<NutritionistCreateInput, NutritionistUncheckedCreateInput>
  }


  /**
   * Nutritionist createMany
   */
  export type NutritionistCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nutritionists.
     */
    data: NutritionistCreateManyInput | NutritionistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Nutritionist update
   */
  export type NutritionistUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * The data needed to update a Nutritionist.
     */
    data: XOR<NutritionistUpdateInput, NutritionistUncheckedUpdateInput>
    /**
     * Choose, which Nutritionist to update.
     */
    where: NutritionistWhereUniqueInput
  }


  /**
   * Nutritionist updateMany
   */
  export type NutritionistUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nutritionists.
     */
    data: XOR<NutritionistUpdateManyMutationInput, NutritionistUncheckedUpdateManyInput>
    /**
     * Filter which Nutritionists to update
     */
    where?: NutritionistWhereInput
  }


  /**
   * Nutritionist upsert
   */
  export type NutritionistUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * The filter to search for the Nutritionist to update in case it exists.
     */
    where: NutritionistWhereUniqueInput
    /**
     * In case the Nutritionist found by the `where` argument doesn't exist, create a new Nutritionist with this data.
     */
    create: XOR<NutritionistCreateInput, NutritionistUncheckedCreateInput>
    /**
     * In case the Nutritionist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NutritionistUpdateInput, NutritionistUncheckedUpdateInput>
  }


  /**
   * Nutritionist delete
   */
  export type NutritionistDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
    /**
     * Filter which Nutritionist to delete.
     */
    where: NutritionistWhereUniqueInput
  }


  /**
   * Nutritionist deleteMany
   */
  export type NutritionistDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nutritionists to delete
     */
    where?: NutritionistWhereInput
  }


  /**
   * Nutritionist.patients
   */
  export type Nutritionist$patientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Nutritionist without action
   */
  export type NutritionistDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nutritionist
     */
    select?: NutritionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NutritionistInclude<ExtArgs> | null
  }



  /**
   * Model PatientUser
   */

  export type AggregatePatientUser = {
    _count: PatientUserCountAggregateOutputType | null
    _avg: PatientUserAvgAggregateOutputType | null
    _sum: PatientUserSumAggregateOutputType | null
    _min: PatientUserMinAggregateOutputType | null
    _max: PatientUserMaxAggregateOutputType | null
  }

  export type PatientUserAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientUserSumAggregateOutputType = {
    id: number | null
  }

  export type PatientUserMinAggregateOutputType = {
    id: number | null
    name: string | null
    lastname: string | null
    email: string | null
    password: string | null
  }

  export type PatientUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    lastname: string | null
    email: string | null
    password: string | null
  }

  export type PatientUserCountAggregateOutputType = {
    id: number
    name: number
    lastname: number
    email: number
    password: number
    _all: number
  }


  export type PatientUserAvgAggregateInputType = {
    id?: true
  }

  export type PatientUserSumAggregateInputType = {
    id?: true
  }

  export type PatientUserMinAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
  }

  export type PatientUserMaxAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
  }

  export type PatientUserCountAggregateInputType = {
    id?: true
    name?: true
    lastname?: true
    email?: true
    password?: true
    _all?: true
  }

  export type PatientUserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientUser to aggregate.
     */
    where?: PatientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientUsers to fetch.
     */
    orderBy?: PatientUserOrderByWithRelationInput | PatientUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientUsers
    **/
    _count?: true | PatientUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientUserMaxAggregateInputType
  }

  export type GetPatientUserAggregateType<T extends PatientUserAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientUser[P]>
      : GetScalarType<T[P], AggregatePatientUser[P]>
  }




  export type PatientUserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientUserWhereInput
    orderBy?: PatientUserOrderByWithAggregationInput | PatientUserOrderByWithAggregationInput[]
    by: PatientUserScalarFieldEnum[] | PatientUserScalarFieldEnum
    having?: PatientUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientUserCountAggregateInputType | true
    _avg?: PatientUserAvgAggregateInputType
    _sum?: PatientUserSumAggregateInputType
    _min?: PatientUserMinAggregateInputType
    _max?: PatientUserMaxAggregateInputType
  }

  export type PatientUserGroupByOutputType = {
    id: number
    name: string
    lastname: string
    email: string
    password: string
    _count: PatientUserCountAggregateOutputType | null
    _avg: PatientUserAvgAggregateOutputType | null
    _sum: PatientUserSumAggregateOutputType | null
    _min: PatientUserMinAggregateOutputType | null
    _max: PatientUserMaxAggregateOutputType | null
  }

  type GetPatientUserGroupByPayload<T extends PatientUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientUserGroupByOutputType[P]>
            : GetScalarType<T[P], PatientUserGroupByOutputType[P]>
        }
      >
    >


  export type PatientUserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    patients?: boolean | PatientUser$patientsArgs<ExtArgs>
    _count?: boolean | PatientUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientUser"]>

  export type PatientUserSelectScalar = {
    id?: boolean
    name?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
  }

  export type PatientUserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patients?: boolean | PatientUser$patientsArgs<ExtArgs>
    _count?: boolean | PatientUserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PatientUserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PatientUser"
    objects: {
      patients: Prisma.$PatientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      lastname: string
      email: string
      password: string
    }, ExtArgs["result"]["patientUser"]>
    composites: {}
  }


  type PatientUserGetPayload<S extends boolean | null | undefined | PatientUserDefaultArgs> = $Result.GetResult<Prisma.$PatientUserPayload, S>

  type PatientUserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PatientUserFindManyArgs, 'select' | 'include'> & {
      select?: PatientUserCountAggregateInputType | true
    }

  export interface PatientUserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientUser'], meta: { name: 'PatientUser' } }
    /**
     * Find zero or one PatientUser that matches the filter.
     * @param {PatientUserFindUniqueArgs} args - Arguments to find a PatientUser
     * @example
     * // Get one PatientUser
     * const patientUser = await prisma.patientUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserFindUniqueArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PatientUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientUserFindUniqueOrThrowArgs} args - Arguments to find a PatientUser
     * @example
     * // Get one PatientUser
     * const patientUser = await prisma.patientUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PatientUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserFindFirstArgs} args - Arguments to find a PatientUser
     * @example
     * // Get one PatientUser
     * const patientUser = await prisma.patientUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserFindFirstArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PatientUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserFindFirstOrThrowArgs} args - Arguments to find a PatientUser
     * @example
     * // Get one PatientUser
     * const patientUser = await prisma.patientUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PatientUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientUsers
     * const patientUsers = await prisma.patientUser.findMany()
     * 
     * // Get first 10 PatientUsers
     * const patientUsers = await prisma.patientUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientUserWithIdOnly = await prisma.patientUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PatientUser.
     * @param {PatientUserCreateArgs} args - Arguments to create a PatientUser.
     * @example
     * // Create one PatientUser
     * const PatientUser = await prisma.patientUser.create({
     *   data: {
     *     // ... data to create a PatientUser
     *   }
     * })
     * 
    **/
    create<T extends PatientUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserCreateArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PatientUsers.
     *     @param {PatientUserCreateManyArgs} args - Arguments to create many PatientUsers.
     *     @example
     *     // Create many PatientUsers
     *     const patientUser = await prisma.patientUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientUser.
     * @param {PatientUserDeleteArgs} args - Arguments to delete one PatientUser.
     * @example
     * // Delete one PatientUser
     * const PatientUser = await prisma.patientUser.delete({
     *   where: {
     *     // ... filter to delete one PatientUser
     *   }
     * })
     * 
    **/
    delete<T extends PatientUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserDeleteArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PatientUser.
     * @param {PatientUserUpdateArgs} args - Arguments to update one PatientUser.
     * @example
     * // Update one PatientUser
     * const patientUser = await prisma.patientUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserUpdateArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PatientUsers.
     * @param {PatientUserDeleteManyArgs} args - Arguments to filter PatientUsers to delete.
     * @example
     * // Delete a few PatientUsers
     * const { count } = await prisma.patientUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientUsers
     * const patientUser = await prisma.patientUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientUser.
     * @param {PatientUserUpsertArgs} args - Arguments to update or create a PatientUser.
     * @example
     * // Update or create a PatientUser
     * const patientUser = await prisma.patientUser.upsert({
     *   create: {
     *     // ... data to create a PatientUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientUser we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUserUpsertArgs<ExtArgs>>
    ): Prisma__PatientUserClient<$Result.GetResult<Prisma.$PatientUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PatientUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserCountArgs} args - Arguments to filter PatientUsers to count.
     * @example
     * // Count the number of PatientUsers
     * const count = await prisma.patientUser.count({
     *   where: {
     *     // ... the filter for the PatientUsers we want to count
     *   }
     * })
    **/
    count<T extends PatientUserCountArgs>(
      args?: Subset<T, PatientUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientUserAggregateArgs>(args: Subset<T, PatientUserAggregateArgs>): Prisma.PrismaPromise<GetPatientUserAggregateType<T>>

    /**
     * Group by PatientUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientUserGroupByArgs['orderBy'] }
        : { orderBy?: PatientUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientUser model
   */
  readonly fields: PatientUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientUserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    patients<T extends PatientUser$patientsArgs<ExtArgs> = {}>(args?: Subset<T, PatientUser$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PatientUser model
   */ 
  interface PatientUserFieldRefs {
    readonly id: FieldRef<"PatientUser", 'Int'>
    readonly name: FieldRef<"PatientUser", 'String'>
    readonly lastname: FieldRef<"PatientUser", 'String'>
    readonly email: FieldRef<"PatientUser", 'String'>
    readonly password: FieldRef<"PatientUser", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PatientUser findUnique
   */
  export type PatientUserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter, which PatientUser to fetch.
     */
    where: PatientUserWhereUniqueInput
  }


  /**
   * PatientUser findUniqueOrThrow
   */
  export type PatientUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter, which PatientUser to fetch.
     */
    where: PatientUserWhereUniqueInput
  }


  /**
   * PatientUser findFirst
   */
  export type PatientUserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter, which PatientUser to fetch.
     */
    where?: PatientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientUsers to fetch.
     */
    orderBy?: PatientUserOrderByWithRelationInput | PatientUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientUsers.
     */
    cursor?: PatientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientUsers.
     */
    distinct?: PatientUserScalarFieldEnum | PatientUserScalarFieldEnum[]
  }


  /**
   * PatientUser findFirstOrThrow
   */
  export type PatientUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter, which PatientUser to fetch.
     */
    where?: PatientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientUsers to fetch.
     */
    orderBy?: PatientUserOrderByWithRelationInput | PatientUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientUsers.
     */
    cursor?: PatientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientUsers.
     */
    distinct?: PatientUserScalarFieldEnum | PatientUserScalarFieldEnum[]
  }


  /**
   * PatientUser findMany
   */
  export type PatientUserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter, which PatientUsers to fetch.
     */
    where?: PatientUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientUsers to fetch.
     */
    orderBy?: PatientUserOrderByWithRelationInput | PatientUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientUsers.
     */
    cursor?: PatientUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientUsers.
     */
    skip?: number
    distinct?: PatientUserScalarFieldEnum | PatientUserScalarFieldEnum[]
  }


  /**
   * PatientUser create
   */
  export type PatientUserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientUser.
     */
    data: XOR<PatientUserCreateInput, PatientUserUncheckedCreateInput>
  }


  /**
   * PatientUser createMany
   */
  export type PatientUserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientUsers.
     */
    data: PatientUserCreateManyInput | PatientUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PatientUser update
   */
  export type PatientUserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientUser.
     */
    data: XOR<PatientUserUpdateInput, PatientUserUncheckedUpdateInput>
    /**
     * Choose, which PatientUser to update.
     */
    where: PatientUserWhereUniqueInput
  }


  /**
   * PatientUser updateMany
   */
  export type PatientUserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientUsers.
     */
    data: XOR<PatientUserUpdateManyMutationInput, PatientUserUncheckedUpdateManyInput>
    /**
     * Filter which PatientUsers to update
     */
    where?: PatientUserWhereInput
  }


  /**
   * PatientUser upsert
   */
  export type PatientUserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientUser to update in case it exists.
     */
    where: PatientUserWhereUniqueInput
    /**
     * In case the PatientUser found by the `where` argument doesn't exist, create a new PatientUser with this data.
     */
    create: XOR<PatientUserCreateInput, PatientUserUncheckedCreateInput>
    /**
     * In case the PatientUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUserUpdateInput, PatientUserUncheckedUpdateInput>
  }


  /**
   * PatientUser delete
   */
  export type PatientUserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
    /**
     * Filter which PatientUser to delete.
     */
    where: PatientUserWhereUniqueInput
  }


  /**
   * PatientUser deleteMany
   */
  export type PatientUserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientUsers to delete
     */
    where?: PatientUserWhereInput
  }


  /**
   * PatientUser.patients
   */
  export type PatientUser$patientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * PatientUser without action
   */
  export type PatientUserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientUser
     */
    select?: PatientUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientUserInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PatientScalarFieldEnum: {
    name: 'name',
    id: 'id',
    lastname: 'lastname',
    email: 'email',
    patientId: 'patientId',
    tips: 'tips',
    recipes: 'recipes',
    age: 'age',
    weight: 'weight',
    height: 'height',
    objective: 'objective',
    first_consult: 'first_consult',
    dni: 'dni',
    location: 'location',
    foodPlan: 'foodPlan',
    patientUserId: 'patientUserId'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const NutritionistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    lastname: 'lastname',
    email: 'email',
    password: 'password',
    location: 'location'
  };

  export type NutritionistScalarFieldEnum = (typeof NutritionistScalarFieldEnum)[keyof typeof NutritionistScalarFieldEnum]


  export const PatientUserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    lastname: 'lastname',
    email: 'email',
    password: 'password'
  };

  export type PatientUserScalarFieldEnum = (typeof PatientUserScalarFieldEnum)[keyof typeof PatientUserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    id?: IntFilter<"Patient"> | number
    lastname?: StringFilter<"Patient"> | string
    email?: StringFilter<"Patient"> | string
    patientId?: IntFilter<"Patient"> | number
    tips?: StringNullableFilter<"Patient"> | string | null
    recipes?: JsonNullableFilter<"Patient">
    age?: IntFilter<"Patient"> | number
    weight?: StringFilter<"Patient"> | string
    height?: StringFilter<"Patient"> | string
    objective?: StringFilter<"Patient"> | string
    first_consult?: DateTimeFilter<"Patient"> | Date | string
    dni?: IntFilter<"Patient"> | number
    location?: StringFilter<"Patient"> | string
    foodPlan?: JsonNullableFilter<"Patient">
    patientUserId?: IntNullableFilter<"Patient"> | number | null
    nutritionist?: XOR<NutritionistRelationFilter, NutritionistWhereInput>
    PatientUser?: XOR<PatientUserNullableRelationFilter, PatientUserWhereInput> | null
  }

  export type PatientOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    patientId?: SortOrder
    tips?: SortOrderInput | SortOrder
    recipes?: SortOrderInput | SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    objective?: SortOrder
    first_consult?: SortOrder
    dni?: SortOrder
    location?: SortOrder
    foodPlan?: SortOrderInput | SortOrder
    patientUserId?: SortOrderInput | SortOrder
    nutritionist?: NutritionistOrderByWithRelationInput
    PatientUser?: PatientUserOrderByWithRelationInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    dni?: number
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    lastname?: StringFilter<"Patient"> | string
    patientId?: IntFilter<"Patient"> | number
    tips?: StringNullableFilter<"Patient"> | string | null
    recipes?: JsonNullableFilter<"Patient">
    age?: IntFilter<"Patient"> | number
    weight?: StringFilter<"Patient"> | string
    height?: StringFilter<"Patient"> | string
    objective?: StringFilter<"Patient"> | string
    first_consult?: DateTimeFilter<"Patient"> | Date | string
    location?: StringFilter<"Patient"> | string
    foodPlan?: JsonNullableFilter<"Patient">
    patientUserId?: IntNullableFilter<"Patient"> | number | null
    nutritionist?: XOR<NutritionistRelationFilter, NutritionistWhereInput>
    PatientUser?: XOR<PatientUserNullableRelationFilter, PatientUserWhereInput> | null
  }, "id" | "email" | "dni">

  export type PatientOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    patientId?: SortOrder
    tips?: SortOrderInput | SortOrder
    recipes?: SortOrderInput | SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    objective?: SortOrder
    first_consult?: SortOrder
    dni?: SortOrder
    location?: SortOrder
    foodPlan?: SortOrderInput | SortOrder
    patientUserId?: SortOrderInput | SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Patient"> | string
    id?: IntWithAggregatesFilter<"Patient"> | number
    lastname?: StringWithAggregatesFilter<"Patient"> | string
    email?: StringWithAggregatesFilter<"Patient"> | string
    patientId?: IntWithAggregatesFilter<"Patient"> | number
    tips?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    recipes?: JsonNullableWithAggregatesFilter<"Patient">
    age?: IntWithAggregatesFilter<"Patient"> | number
    weight?: StringWithAggregatesFilter<"Patient"> | string
    height?: StringWithAggregatesFilter<"Patient"> | string
    objective?: StringWithAggregatesFilter<"Patient"> | string
    first_consult?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    dni?: IntWithAggregatesFilter<"Patient"> | number
    location?: StringWithAggregatesFilter<"Patient"> | string
    foodPlan?: JsonNullableWithAggregatesFilter<"Patient">
    patientUserId?: IntNullableWithAggregatesFilter<"Patient"> | number | null
  }

  export type NutritionistWhereInput = {
    AND?: NutritionistWhereInput | NutritionistWhereInput[]
    OR?: NutritionistWhereInput[]
    NOT?: NutritionistWhereInput | NutritionistWhereInput[]
    id?: IntFilter<"Nutritionist"> | number
    name?: StringFilter<"Nutritionist"> | string
    lastname?: StringFilter<"Nutritionist"> | string
    email?: StringFilter<"Nutritionist"> | string
    password?: StringFilter<"Nutritionist"> | string
    location?: StringFilter<"Nutritionist"> | string
    patients?: PatientListRelationFilter
  }

  export type NutritionistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
    patients?: PatientOrderByRelationAggregateInput
  }

  export type NutritionistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: NutritionistWhereInput | NutritionistWhereInput[]
    OR?: NutritionistWhereInput[]
    NOT?: NutritionistWhereInput | NutritionistWhereInput[]
    name?: StringFilter<"Nutritionist"> | string
    lastname?: StringFilter<"Nutritionist"> | string
    password?: StringFilter<"Nutritionist"> | string
    location?: StringFilter<"Nutritionist"> | string
    patients?: PatientListRelationFilter
  }, "id" | "email">

  export type NutritionistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
    _count?: NutritionistCountOrderByAggregateInput
    _avg?: NutritionistAvgOrderByAggregateInput
    _max?: NutritionistMaxOrderByAggregateInput
    _min?: NutritionistMinOrderByAggregateInput
    _sum?: NutritionistSumOrderByAggregateInput
  }

  export type NutritionistScalarWhereWithAggregatesInput = {
    AND?: NutritionistScalarWhereWithAggregatesInput | NutritionistScalarWhereWithAggregatesInput[]
    OR?: NutritionistScalarWhereWithAggregatesInput[]
    NOT?: NutritionistScalarWhereWithAggregatesInput | NutritionistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Nutritionist"> | number
    name?: StringWithAggregatesFilter<"Nutritionist"> | string
    lastname?: StringWithAggregatesFilter<"Nutritionist"> | string
    email?: StringWithAggregatesFilter<"Nutritionist"> | string
    password?: StringWithAggregatesFilter<"Nutritionist"> | string
    location?: StringWithAggregatesFilter<"Nutritionist"> | string
  }

  export type PatientUserWhereInput = {
    AND?: PatientUserWhereInput | PatientUserWhereInput[]
    OR?: PatientUserWhereInput[]
    NOT?: PatientUserWhereInput | PatientUserWhereInput[]
    id?: IntFilter<"PatientUser"> | number
    name?: StringFilter<"PatientUser"> | string
    lastname?: StringFilter<"PatientUser"> | string
    email?: StringFilter<"PatientUser"> | string
    password?: StringFilter<"PatientUser"> | string
    patients?: PatientListRelationFilter
  }

  export type PatientUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    patients?: PatientOrderByRelationAggregateInput
  }

  export type PatientUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: PatientUserWhereInput | PatientUserWhereInput[]
    OR?: PatientUserWhereInput[]
    NOT?: PatientUserWhereInput | PatientUserWhereInput[]
    name?: StringFilter<"PatientUser"> | string
    lastname?: StringFilter<"PatientUser"> | string
    password?: StringFilter<"PatientUser"> | string
    patients?: PatientListRelationFilter
  }, "id" | "email">

  export type PatientUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: PatientUserCountOrderByAggregateInput
    _avg?: PatientUserAvgOrderByAggregateInput
    _max?: PatientUserMaxOrderByAggregateInput
    _min?: PatientUserMinOrderByAggregateInput
    _sum?: PatientUserSumOrderByAggregateInput
  }

  export type PatientUserScalarWhereWithAggregatesInput = {
    AND?: PatientUserScalarWhereWithAggregatesInput | PatientUserScalarWhereWithAggregatesInput[]
    OR?: PatientUserScalarWhereWithAggregatesInput[]
    NOT?: PatientUserScalarWhereWithAggregatesInput | PatientUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientUser"> | number
    name?: StringWithAggregatesFilter<"PatientUser"> | string
    lastname?: StringWithAggregatesFilter<"PatientUser"> | string
    email?: StringWithAggregatesFilter<"PatientUser"> | string
    password?: StringWithAggregatesFilter<"PatientUser"> | string
  }

  export type PatientCreateInput = {
    name: string
    id: number
    lastname: string
    email: string
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    nutritionist: NutritionistCreateNestedOneWithoutPatientsInput
    PatientUser?: PatientUserCreateNestedOneWithoutPatientsInput
  }

  export type PatientUncheckedCreateInput = {
    name: string
    id: number
    lastname: string
    email: string
    patientId: number
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: number | null
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    nutritionist?: NutritionistUpdateOneRequiredWithoutPatientsNestedInput
    PatientUser?: PatientUserUpdateOneWithoutPatientsNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientCreateManyInput = {
    name: string
    id: number
    lastname: string
    email: string
    patientId: number
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: number | null
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NutritionistCreateInput = {
    name: string
    lastname: string
    email: string
    password: string
    location: string
    patients?: PatientCreateNestedManyWithoutNutritionistInput
  }

  export type NutritionistUncheckedCreateInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
    location: string
    patients?: PatientUncheckedCreateNestedManyWithoutNutritionistInput
  }

  export type NutritionistUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    patients?: PatientUpdateManyWithoutNutritionistNestedInput
  }

  export type NutritionistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    patients?: PatientUncheckedUpdateManyWithoutNutritionistNestedInput
  }

  export type NutritionistCreateManyInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
    location: string
  }

  export type NutritionistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type NutritionistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUserCreateInput = {
    name: string
    lastname: string
    email: string
    password: string
    patients?: PatientCreateNestedManyWithoutPatientUserInput
  }

  export type PatientUserUncheckedCreateInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
    patients?: PatientUncheckedCreateNestedManyWithoutPatientUserInput
  }

  export type PatientUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    patients?: PatientUpdateManyWithoutPatientUserNestedInput
  }

  export type PatientUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    patients?: PatientUncheckedUpdateManyWithoutPatientUserNestedInput
  }

  export type PatientUserCreateManyInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
  }

  export type PatientUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NutritionistRelationFilter = {
    is?: NutritionistWhereInput
    isNot?: NutritionistWhereInput
  }

  export type PatientUserNullableRelationFilter = {
    is?: PatientUserWhereInput | null
    isNot?: PatientUserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatientCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    patientId?: SortOrder
    tips?: SortOrder
    recipes?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    objective?: SortOrder
    first_consult?: SortOrder
    dni?: SortOrder
    location?: SortOrder
    foodPlan?: SortOrder
    patientUserId?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    age?: SortOrder
    dni?: SortOrder
    patientUserId?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    patientId?: SortOrder
    tips?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    objective?: SortOrder
    first_consult?: SortOrder
    dni?: SortOrder
    location?: SortOrder
    patientUserId?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    patientId?: SortOrder
    tips?: SortOrder
    age?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    objective?: SortOrder
    first_consult?: SortOrder
    dni?: SortOrder
    location?: SortOrder
    patientUserId?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    age?: SortOrder
    dni?: SortOrder
    patientUserId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NutritionistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
  }

  export type NutritionistAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NutritionistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
  }

  export type NutritionistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    location?: SortOrder
  }

  export type NutritionistSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type PatientUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type PatientUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type PatientUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NutritionistCreateNestedOneWithoutPatientsInput = {
    create?: XOR<NutritionistCreateWithoutPatientsInput, NutritionistUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: NutritionistCreateOrConnectWithoutPatientsInput
    connect?: NutritionistWhereUniqueInput
  }

  export type PatientUserCreateNestedOneWithoutPatientsInput = {
    create?: XOR<PatientUserCreateWithoutPatientsInput, PatientUserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: PatientUserCreateOrConnectWithoutPatientsInput
    connect?: PatientUserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NutritionistUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<NutritionistCreateWithoutPatientsInput, NutritionistUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: NutritionistCreateOrConnectWithoutPatientsInput
    upsert?: NutritionistUpsertWithoutPatientsInput
    connect?: NutritionistWhereUniqueInput
    update?: XOR<XOR<NutritionistUpdateToOneWithWhereWithoutPatientsInput, NutritionistUpdateWithoutPatientsInput>, NutritionistUncheckedUpdateWithoutPatientsInput>
  }

  export type PatientUserUpdateOneWithoutPatientsNestedInput = {
    create?: XOR<PatientUserCreateWithoutPatientsInput, PatientUserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: PatientUserCreateOrConnectWithoutPatientsInput
    upsert?: PatientUserUpsertWithoutPatientsInput
    disconnect?: PatientUserWhereInput | boolean
    delete?: PatientUserWhereInput | boolean
    connect?: PatientUserWhereUniqueInput
    update?: XOR<XOR<PatientUserUpdateToOneWithWhereWithoutPatientsInput, PatientUserUpdateWithoutPatientsInput>, PatientUserUncheckedUpdateWithoutPatientsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput> | PatientCreateWithoutNutritionistInput[] | PatientUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutNutritionistInput | PatientCreateOrConnectWithoutNutritionistInput[]
    createMany?: PatientCreateManyNutritionistInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutNutritionistInput = {
    create?: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput> | PatientCreateWithoutNutritionistInput[] | PatientUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutNutritionistInput | PatientCreateOrConnectWithoutNutritionistInput[]
    createMany?: PatientCreateManyNutritionistInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput> | PatientCreateWithoutNutritionistInput[] | PatientUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutNutritionistInput | PatientCreateOrConnectWithoutNutritionistInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutNutritionistInput | PatientUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: PatientCreateManyNutritionistInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutNutritionistInput | PatientUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutNutritionistInput | PatientUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutNutritionistNestedInput = {
    create?: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput> | PatientCreateWithoutNutritionistInput[] | PatientUncheckedCreateWithoutNutritionistInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutNutritionistInput | PatientCreateOrConnectWithoutNutritionistInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutNutritionistInput | PatientUpsertWithWhereUniqueWithoutNutritionistInput[]
    createMany?: PatientCreateManyNutritionistInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutNutritionistInput | PatientUpdateWithWhereUniqueWithoutNutritionistInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutNutritionistInput | PatientUpdateManyWithWhereWithoutNutritionistInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientCreateNestedManyWithoutPatientUserInput = {
    create?: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput> | PatientCreateWithoutPatientUserInput[] | PatientUncheckedCreateWithoutPatientUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPatientUserInput | PatientCreateOrConnectWithoutPatientUserInput[]
    createMany?: PatientCreateManyPatientUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutPatientUserInput = {
    create?: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput> | PatientCreateWithoutPatientUserInput[] | PatientUncheckedCreateWithoutPatientUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPatientUserInput | PatientCreateOrConnectWithoutPatientUserInput[]
    createMany?: PatientCreateManyPatientUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type PatientUpdateManyWithoutPatientUserNestedInput = {
    create?: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput> | PatientCreateWithoutPatientUserInput[] | PatientUncheckedCreateWithoutPatientUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPatientUserInput | PatientCreateOrConnectWithoutPatientUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutPatientUserInput | PatientUpsertWithWhereUniqueWithoutPatientUserInput[]
    createMany?: PatientCreateManyPatientUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutPatientUserInput | PatientUpdateWithWhereUniqueWithoutPatientUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutPatientUserInput | PatientUpdateManyWithWhereWithoutPatientUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutPatientUserNestedInput = {
    create?: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput> | PatientCreateWithoutPatientUserInput[] | PatientUncheckedCreateWithoutPatientUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutPatientUserInput | PatientCreateOrConnectWithoutPatientUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutPatientUserInput | PatientUpsertWithWhereUniqueWithoutPatientUserInput[]
    createMany?: PatientCreateManyPatientUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutPatientUserInput | PatientUpdateWithWhereUniqueWithoutPatientUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutPatientUserInput | PatientUpdateManyWithWhereWithoutPatientUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NutritionistCreateWithoutPatientsInput = {
    name: string
    lastname: string
    email: string
    password: string
    location: string
  }

  export type NutritionistUncheckedCreateWithoutPatientsInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
    location: string
  }

  export type NutritionistCreateOrConnectWithoutPatientsInput = {
    where: NutritionistWhereUniqueInput
    create: XOR<NutritionistCreateWithoutPatientsInput, NutritionistUncheckedCreateWithoutPatientsInput>
  }

  export type PatientUserCreateWithoutPatientsInput = {
    name: string
    lastname: string
    email: string
    password: string
  }

  export type PatientUserUncheckedCreateWithoutPatientsInput = {
    id?: number
    name: string
    lastname: string
    email: string
    password: string
  }

  export type PatientUserCreateOrConnectWithoutPatientsInput = {
    where: PatientUserWhereUniqueInput
    create: XOR<PatientUserCreateWithoutPatientsInput, PatientUserUncheckedCreateWithoutPatientsInput>
  }

  export type NutritionistUpsertWithoutPatientsInput = {
    update: XOR<NutritionistUpdateWithoutPatientsInput, NutritionistUncheckedUpdateWithoutPatientsInput>
    create: XOR<NutritionistCreateWithoutPatientsInput, NutritionistUncheckedCreateWithoutPatientsInput>
    where?: NutritionistWhereInput
  }

  export type NutritionistUpdateToOneWithWhereWithoutPatientsInput = {
    where?: NutritionistWhereInput
    data: XOR<NutritionistUpdateWithoutPatientsInput, NutritionistUncheckedUpdateWithoutPatientsInput>
  }

  export type NutritionistUpdateWithoutPatientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type NutritionistUncheckedUpdateWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUserUpsertWithoutPatientsInput = {
    update: XOR<PatientUserUpdateWithoutPatientsInput, PatientUserUncheckedUpdateWithoutPatientsInput>
    create: XOR<PatientUserCreateWithoutPatientsInput, PatientUserUncheckedCreateWithoutPatientsInput>
    where?: PatientUserWhereInput
  }

  export type PatientUserUpdateToOneWithWhereWithoutPatientsInput = {
    where?: PatientUserWhereInput
    data: XOR<PatientUserUpdateWithoutPatientsInput, PatientUserUncheckedUpdateWithoutPatientsInput>
  }

  export type PatientUserUpdateWithoutPatientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUserUncheckedUpdateWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PatientCreateWithoutNutritionistInput = {
    name: string
    id: number
    lastname: string
    email: string
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    PatientUser?: PatientUserCreateNestedOneWithoutPatientsInput
  }

  export type PatientUncheckedCreateWithoutNutritionistInput = {
    name: string
    id: number
    lastname: string
    email: string
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: number | null
  }

  export type PatientCreateOrConnectWithoutNutritionistInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput>
  }

  export type PatientCreateManyNutritionistInputEnvelope = {
    data: PatientCreateManyNutritionistInput | PatientCreateManyNutritionistInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutNutritionistInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutNutritionistInput, PatientUncheckedUpdateWithoutNutritionistInput>
    create: XOR<PatientCreateWithoutNutritionistInput, PatientUncheckedCreateWithoutNutritionistInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutNutritionistInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutNutritionistInput, PatientUncheckedUpdateWithoutNutritionistInput>
  }

  export type PatientUpdateManyWithWhereWithoutNutritionistInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutNutritionistInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    name?: StringFilter<"Patient"> | string
    id?: IntFilter<"Patient"> | number
    lastname?: StringFilter<"Patient"> | string
    email?: StringFilter<"Patient"> | string
    patientId?: IntFilter<"Patient"> | number
    tips?: StringNullableFilter<"Patient"> | string | null
    recipes?: JsonNullableFilter<"Patient">
    age?: IntFilter<"Patient"> | number
    weight?: StringFilter<"Patient"> | string
    height?: StringFilter<"Patient"> | string
    objective?: StringFilter<"Patient"> | string
    first_consult?: DateTimeFilter<"Patient"> | Date | string
    dni?: IntFilter<"Patient"> | number
    location?: StringFilter<"Patient"> | string
    foodPlan?: JsonNullableFilter<"Patient">
    patientUserId?: IntNullableFilter<"Patient"> | number | null
  }

  export type PatientCreateWithoutPatientUserInput = {
    name: string
    id: number
    lastname: string
    email: string
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    nutritionist: NutritionistCreateNestedOneWithoutPatientsInput
  }

  export type PatientUncheckedCreateWithoutPatientUserInput = {
    name: string
    id: number
    lastname: string
    email: string
    patientId: number
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientCreateOrConnectWithoutPatientUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput>
  }

  export type PatientCreateManyPatientUserInputEnvelope = {
    data: PatientCreateManyPatientUserInput | PatientCreateManyPatientUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutPatientUserInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutPatientUserInput, PatientUncheckedUpdateWithoutPatientUserInput>
    create: XOR<PatientCreateWithoutPatientUserInput, PatientUncheckedCreateWithoutPatientUserInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutPatientUserInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutPatientUserInput, PatientUncheckedUpdateWithoutPatientUserInput>
  }

  export type PatientUpdateManyWithWhereWithoutPatientUserInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientUserInput>
  }

  export type PatientCreateManyNutritionistInput = {
    name: string
    id: number
    lastname: string
    email: string
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: number | null
  }

  export type PatientUpdateWithoutNutritionistInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    PatientUser?: PatientUserUpdateOneWithoutPatientsNestedInput
  }

  export type PatientUncheckedUpdateWithoutNutritionistInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientUncheckedUpdateManyWithoutNutritionistInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    patientUserId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientCreateManyPatientUserInput = {
    name: string
    id: number
    lastname: string
    email: string
    patientId: number
    tips?: string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age: number
    weight: string
    height: string
    objective: string
    first_consult?: Date | string
    dni: number
    location: string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientUpdateWithoutPatientUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
    nutritionist?: NutritionistUpdateOneRequiredWithoutPatientsNestedInput
  }

  export type PatientUncheckedUpdateWithoutPatientUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientUncheckedUpdateManyWithoutPatientUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    patientId?: IntFieldUpdateOperationsInput | number
    tips?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: NullableJsonNullValueInput | InputJsonValue
    age?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    height?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    first_consult?: DateTimeFieldUpdateOperationsInput | Date | string
    dni?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    foodPlan?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NutritionistCountOutputTypeDefaultArgs instead
     */
    export type NutritionistCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NutritionistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientUserCountOutputTypeDefaultArgs instead
     */
    export type PatientUserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NutritionistDefaultArgs instead
     */
    export type NutritionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NutritionistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientUserDefaultArgs instead
     */
    export type PatientUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientUserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}